name: CI/CD using github actions & docker

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: make application.yml
        if: |
          contains(github.ref, 'master')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
        shell: bash

      - name: make application-prod.yml
        if: contains(github.ref, 'master')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker build & push to prod
        if: contains(github.ref, 'master')
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{secrets.AWS_ID}}.dkr.ecr.ap-northeast-2.amazonaws.com
          docker build -t ${{ secrets.DOCKER_REPO }} .
          docker tag ${{ secrets.DOCKER_REPO }}:latest ${{secrets.AWS_ID}}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.DOCKER_REPO }}:latest
          docker push ${{secrets.AWS_ID}}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.DOCKER_REPO }}:latest

      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_NAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_NAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker image prune -f
